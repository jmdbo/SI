// hardware.cpp : Defines the exported functions for the DLL application.
//

//#include "stdafx.h"

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stdio.h>
#include <interface.h>
#include "bitManipulation.h"

#ifndef _Included_trab1_Hardware
#define _Included_trab1_Hardware

#ifdef __cplusplus

extern "C" {
#endif
	/*
	* Class:     trab1_Hardware
	* Method:    initialize_kit
	* Signature: ()V
	*/
	JNIEXPORT void JNICALL Java_trab1_Hardware_initialize_1kit(JNIEnv *, jobject)
	{
		create_DI_channel(4);
		create_DI_channel(5);
		create_DO_channel(0);
		create_DO_channel(1);
		create_DO_channel(2);
		create_DO_channel(3);
	}
	/*
	* Class:     trab1_Hardware
	* Method:    setBit
	* Signature: (II)V
	*/
	JNIEXPORT void JNICALL Java_trab1_Hardware_setBit(JNIEnv *, jobject, jint port, jint n){
		uInt8 v = ReadDigitalU8(port);
		uInt8 mask = 1 << n;
		v = v | mask;
		WriteDigitalU8(port, v);
	}

	/*
	* Class:     trab1_Hardware
	* Method:    resetBit
	* Signature: (II)V
	*/
	JNIEXPORT void JNICALL Java_trab1_Hardware_resetBit(JNIEnv *, jobject, jint port, jint n){
		uInt8 v = ReadDigitalU8(port);
		uInt8 mask1 = 1 << n;
		uInt8 mask2 = 0xFF - mask1;

		v = v & mask2;
		WriteDigitalU8(port, v);

	}

	/*
	* Class:     trab1_Hardware
	* Method:    readBit
	* Signature: (II)Z
	*/
	JNIEXPORT jboolean JNICALL Java_trab1_Hardware_readBit(JNIEnv *, jobject, jint port, jint bit){
		uInt8 v;
		v = ReadDigitalU8(port);
		uInt8 mask = 1 << bit;
		if ((mask & v) != 0)
			return true;
		else return false;
	}


	/*
	* Class:     trab1_Hardware
	* Method:    read_port
	* Signature: (I)I
	*/
	JNIEXPORT jint JNICALL Java_trab1_Hardware_readPort(JNIEnv *, jobject, jint port)
	{
		uInt8 value = ReadDigitalU8(port);
		return value;
	}

	/*
	* Class:     trab1_Hardware
	* Method:    writePort
	* Signature: (II)V
	*/
	JNIEXPORT void JNICALL Java_trab1_Hardware_writePort(JNIEnv *, jobject, jint port, jint value){
		WriteDigitalU8(port, (uInt8)value);
	}
	

#ifdef __cplusplus
}

#endif
#endif
